"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureAllowedOrigins = exports.axeFinishRun = exports.axeRunLegacy = exports.axeGetFrameContext = exports.axeRunPartial = exports.axeSourceInject = exports.logOrRethrowError = exports.normalizeContext = exports.isWebdriverClient = void 0;
var assert_1 = __importDefault(require("assert"));
/**
 * Validates that the client provided is WebdriverIO v5 or v6.
 */
var isWebdriverClient = function (client) {
    if (!client || typeof client !== 'object') {
        return false;
    }
    if (typeof client.execute !== 'function') {
        return false;
    }
    if (typeof client.switchToFrame !== 'function') {
        return false;
    }
    return true;
};
exports.isWebdriverClient = isWebdriverClient;
/**
 * Get running context
 */
var normalizeContext = function (includes, excludes, disabledFrameSelectors) {
    var _a, _b;
    var base = {
        exclude: []
    };
    if (excludes.length && Array.isArray(base.exclude)) {
        (_a = base.exclude).push.apply(_a, excludes);
    }
    if (disabledFrameSelectors.length && Array.isArray(base.exclude)) {
        var frameExcludes = disabledFrameSelectors.map(function (frame) { return [frame, '*']; });
        (_b = base.exclude).push.apply(_b, frameExcludes);
    }
    if (includes.length) {
        base.include = includes;
    }
    return base;
};
exports.normalizeContext = normalizeContext;
/**
 * Checks to make sure that the error thrown was not a stale iframe
 */
var logOrRethrowError = function (error) {
    var _a;
    (0, assert_1.default)(error instanceof Error, 'An unknown error occurred');
    if (((_a = error === null || error === void 0 ? void 0 : error.seleniumStack) === null || _a === void 0 ? void 0 : _a.type) === 'StaleElementReference' ||
        error.name === 'stale element reference') {
        console.error('Tried to inject into a removed iframe. This will not affect the analysis of the rest of the page but you might want to ensure the page has finished updating before starting the analysis.');
    }
    else {
        throw new Error(error.message);
    }
};
exports.logOrRethrowError = logOrRethrowError;
/**
 * Selenium-webdriver thenable aren't chainable. This fixes it.
 */
var promisify = function (thenable) {
    return new Promise(function (resolve, reject) {
        thenable.then(resolve, reject);
    });
};
var axeSourceInject = function (client, axeSource) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, promisify(
            // Had to use executeAsync() because we could not use multiline statements in client.execute()
            // we were able to return a single boolean in a line but not when assigned to a variable.
            client.executeAsync("\n      var callback = arguments[arguments.length - 1];\n      ".concat(axeSource, ";\n      window.axe.configure({\n        branding: { application: 'webdriverio' }\n      });\n      var runPartial = typeof window.axe?.runPartial === 'function';\n      callback(runPartial);\n    ")))];
    });
}); };
exports.axeSourceInject = axeSourceInject;
var axeRunPartial = function (client, context, options) {
    return promisify(client
        .executeAsync("\n      var callback = arguments[arguments.length - 1];\n      var context = ".concat(JSON.stringify(context), " || document;\n      var options = ").concat(JSON.stringify(options), " || {};\n      window.axe.runPartial(context, options).then(function (partials) {\n        callback(JSON.stringify(partials))\n      });"))
        .then(function (r) { return deserialize(r); }));
};
exports.axeRunPartial = axeRunPartial;
var axeGetFrameContext = function (client, context) {
    return promisify(
    // Had to use executeAsync() because we could not use multiline statements in client.execute()
    // we were able to return a single boolean in a line but not when assigned to a variable.
    client.executeAsync("\n      var callback = arguments[arguments.length - 1];\n      var context = ".concat(JSON.stringify(context), ";\n      var frameContexts = window.axe.utils.getFrameContexts(context);\n      callback(frameContexts)\n    ")));
};
exports.axeGetFrameContext = axeGetFrameContext;
var axeRunLegacy = function (client, context, options, config) {
    return promisify(client
        .executeAsync("var callback = arguments[arguments.length - 1];\n      var context = ".concat(JSON.stringify(context), " || document;\n      var options = ").concat(JSON.stringify(options), " || {};\n      var config = ").concat(JSON.stringify(config), " || null;\n      if (config) {\n        window.axe.configure(config);\n      }\n      window.axe.run(context, options).then(function (axeResults) {\n        callback(JSON.stringify(axeResults))\n      });"))
        .then(function (r) { return deserialize(r); }));
};
exports.axeRunLegacy = axeRunLegacy;
var axeFinishRun = function (client, axeSource, partialResults, options) {
    // executeScript has a size limit of ~32 million characters so we'll need
    // to split partialResults into chunks if it exceeds that limit.
    // since we need to stringify twice we need to leave room for the double escaped quotes
    var sizeLimit = 15000000;
    var partialString = JSON.stringify(partialResults.map(function (res) { return JSON.stringify(res); }));
    function chunkResults(result) {
        var chunk = JSON.stringify(result.substring(0, sizeLimit));
        return promisify(client.execute("\n        window.partialResults ??= '';\n        window.partialResults += ".concat(chunk, ";\n        "))).then(function () {
            if (result.length > sizeLimit) {
                return chunkResults(result.substr(sizeLimit));
            }
        });
    }
    return chunkResults(partialString)
        .then(function () {
        return promisify(client.executeAsync("var callback = arguments[arguments.length - 1];\n      ".concat(axeSource, ";\n      window.axe.configure({\n        branding: { application: 'webdriverio' }\n      });\n\n      var partialResults = JSON.parse(window.partialResults).map(res => JSON.parse(res));\n      var options = ").concat(JSON.stringify(options || {}), ";\n      window.axe.finishRun(partialResults, options).then(function (axeResults) {\n        callback(JSON.stringify(axeResults))\n      });")));
    })
        .then(function (r) { return deserialize(r); });
};
exports.axeFinishRun = axeFinishRun;
var configureAllowedOrigins = function (client) {
    return promisify(client.execute("\n      window.axe.configure({ allowedOrigins: ['<unsafe_all_origins>'] })\n    "));
};
exports.configureAllowedOrigins = configureAllowedOrigins;
/**
 * JSON.parse wrapper with types
 *
 * Unlike JSON.parse, WDIO converts { foo: undefined } to { foo: null }.
 * This might throw axe-core off, so we're serializing this ourselves
 */
function deserialize(s) {
    return JSON.parse(s);
}
//# sourceMappingURL=utils.js.map