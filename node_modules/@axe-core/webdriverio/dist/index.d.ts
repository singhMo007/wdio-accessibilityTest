import type { RunOptions, AxeResults, SerialFrameSelector } from 'axe-core';
import type { Options, CallbackFunction } from './types';
export default class AxeBuilder {
    private client;
    private axeSource;
    private includes;
    private excludes;
    private option;
    private disableFrameSelectors;
    private legacyMode;
    private errorUrl;
    constructor({ client, axeSource }: Options);
    /**
     * Disable injecting axe-core into frame(s) matching the
     * given CSS `selector`. This method may be called any number of times.
     */
    disableFrame(selector: string): this;
    /**
     * Selector to include in analysis.
     * This may be called any number of times.
     */
    include(selector: SerialFrameSelector): this;
    /**
     * Selector to exclude in analysis.
     * This may be called any number of times.
     */
    exclude(selector: SerialFrameSelector): this;
    /**
     * Set options to be passed into axe-core
     */
    options(options: RunOptions): this;
    /**
     * Limit analysis to only the specified rules.
     * Cannot be used with `AxeBuilder#withTags`
     */
    withRules(rules: string | string[]): this;
    /**
     * Limit analysis to only specified tags.
     * Cannot be used with `AxeBuilder#withRules`
     */
    withTags(tags: string | string[]): this;
    /**
     * Set the list of rules to skip when running an analysis.
     */
    disableRules(rules: string | string[]): this;
    /**
     * Use frameMessenger with <same_origin_only>
     *
     * This disables use of axe.runPartial() which is called in each frame, and
     * axe.finishRun() which is called in a blank page. This uses axe.run() instead,
     * but with the restriction that cross-origin frames will not be tested.
     */
    setLegacyMode(legacyMode?: boolean): this;
    /**
     * Performs an analysis and retrieves results.
     */
    analyze(callback?: CallbackFunction): Promise<AxeResults>;
    /**
     * Get axe-core source and configurations
     */
    private get script();
    /**
     * Injects `axe-core` into all frames.
     */
    private inject;
    private analyzePromise;
    private runLegacy;
    /**
     * Get a CSS selector for retrieving child iframes.
     */
    private iframeSelector;
    /**
     * Get a CSS selector for retrieving child frames.
     */
    private frameSelector;
    /**
     * Set browsing context - when `null` sets top level page as context
     * - https://webdriver.io/docs/api/webdriver.html#switchtoframe
     */
    private setBrowsingContext;
    /**
     * Get partial results from the current context and its child frames
     * @param {ContextObject} context
     */
    private runPartialRecursive;
    private finishRun;
}
