"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var assert_1 = __importDefault(require("assert"));
var cssesc_1 = __importDefault(require("cssesc"));
var utils_1 = require("./utils");
var AxeBuilder = /** @class */ (function () {
    function AxeBuilder(_a) {
        var client = _a.client, axeSource = _a.axeSource;
        this.includes = [];
        this.excludes = [];
        this.option = {};
        this.disableFrameSelectors = [];
        this.legacyMode = false;
        (0, assert_1.default)((0, utils_1.isWebdriverClient)(client), 'An instantiated WebdriverIO client greater than v5 is required');
        // Treat everything as Browser<'async'>:
        // - Anything sync can also run async, since JS can await sync functions
        // - Ignore MultiRemoteBrowser, which is just Browser with extra props
        this.client = client;
        this.errorUrl =
            'https://github.com/dequelabs/axe-core-npm/blob/develop/packages/webdriverio/error-handling.md';
        if (axeSource) {
            this.axeSource = axeSource;
        }
        else {
            var sourceDir = require.resolve('axe-core');
            try {
                this.axeSource = fs_1.default.readFileSync(sourceDir, 'utf-8');
            }
            catch (e) {
                throw new Error('Unable to find axe-core source. Is axe-core installed?');
            }
        }
    }
    /**
     * Disable injecting axe-core into frame(s) matching the
     * given CSS `selector`. This method may be called any number of times.
     */
    AxeBuilder.prototype.disableFrame = function (selector) {
        this.disableFrameSelectors.push((0, cssesc_1.default)(selector));
        return this;
    };
    /**
     * Selector to include in analysis.
     * This may be called any number of times.
     */
    AxeBuilder.prototype.include = function (selector) {
        this.includes.push(selector);
        return this;
    };
    /**
     * Selector to exclude in analysis.
     * This may be called any number of times.
     */
    AxeBuilder.prototype.exclude = function (selector) {
        this.excludes.push(selector);
        return this;
    };
    /**
     * Set options to be passed into axe-core
     */
    AxeBuilder.prototype.options = function (options) {
        this.option = options;
        return this;
    };
    /**
     * Limit analysis to only the specified rules.
     * Cannot be used with `AxeBuilder#withTags`
     */
    AxeBuilder.prototype.withRules = function (rules) {
        rules = Array.isArray(rules) ? rules : [rules];
        this.option.runOnly = {
            type: 'rule',
            values: rules
        };
        return this;
    };
    /**
     * Limit analysis to only specified tags.
     * Cannot be used with `AxeBuilder#withRules`
     */
    AxeBuilder.prototype.withTags = function (tags) {
        tags = Array.isArray(tags) ? tags : [tags];
        this.option.runOnly = {
            type: 'tag',
            values: tags
        };
        return this;
    };
    /**
     * Set the list of rules to skip when running an analysis.
     */
    AxeBuilder.prototype.disableRules = function (rules) {
        rules = Array.isArray(rules) ? rules : [rules];
        this.option.rules = {};
        for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {
            var rule = rules_1[_i];
            this.option.rules[rule] = { enabled: false };
        }
        return this;
    };
    /**
     * Use frameMessenger with <same_origin_only>
     *
     * This disables use of axe.runPartial() which is called in each frame, and
     * axe.finishRun() which is called in a blank page. This uses axe.run() instead,
     * but with the restriction that cross-origin frames will not be tested.
     */
    AxeBuilder.prototype.setLegacyMode = function (legacyMode) {
        if (legacyMode === void 0) { legacyMode = true; }
        this.legacyMode = legacyMode;
        return this;
    };
    /**
     * Performs an analysis and retrieves results.
     */
    AxeBuilder.prototype.analyze = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        return _this.analyzePromise()
                            .then(function (results) {
                            callback === null || callback === void 0 ? void 0 : callback(null, results);
                            resolve(results);
                        })
                            .catch(function (err) {
                            // When using a callback, do *not* reject the wrapping Promise. This prevents having to handle the same error twice.
                            if (callback) {
                                callback(err.message, null);
                            }
                            else {
                                reject(err);
                            }
                        });
                    })];
            });
        });
    };
    Object.defineProperty(AxeBuilder.prototype, "script", {
        /**
         * Get axe-core source and configurations
         */
        get: function () {
            return "\n        ".concat(this.axeSource, "\n        axe.configure({\n          branding: { application: 'webdriverio' }\n        })\n        ");
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Injects `axe-core` into all frames.
     */
    AxeBuilder.prototype.inject = function (browsingContext) {
        if (browsingContext === void 0) { browsingContext = null; }
        return __awaiter(this, void 0, void 0, function () {
            var runPartialSupported, frames, iframes, _a, _b, _i, iframes_1, iframe, error_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.setBrowsingContext(browsingContext)];
                    case 1:
                        _c.sent();
                        return [4 /*yield*/, (0, utils_1.axeSourceInject)(this.client, this.axeSource)];
                    case 2:
                        runPartialSupported = _c.sent();
                        if (!(!this.legacyMode && !runPartialSupported)) return [3 /*break*/, 4];
                        return [4 /*yield*/, (0, utils_1.configureAllowedOrigins)(this.client)];
                    case 3:
                        _c.sent();
                        _c.label = 4;
                    case 4: return [4 /*yield*/, this.client.$$(this.frameSelector())];
                    case 5:
                        frames = (_c.sent()) || [];
                        _b = (_a = frames).concat;
                        return [4 /*yield*/, this.client.$$(this.iframeSelector())];
                    case 6:
                        iframes = _b.apply(_a, [_c.sent()]) || [];
                        if (!iframes.length) {
                            return [2 /*return*/];
                        }
                        _i = 0, iframes_1 = iframes;
                        _c.label = 7;
                    case 7:
                        if (!(_i < iframes_1.length)) return [3 /*break*/, 14];
                        iframe = iframes_1[_i];
                        _c.label = 8;
                    case 8:
                        _c.trys.push([8, 12, , 13]);
                        return [4 /*yield*/, iframe.isExisting()];
                    case 9:
                        if (!(_c.sent())) {
                            return [3 /*break*/, 13];
                        }
                        return [4 /*yield*/, this.inject(iframe)];
                    case 10:
                        _c.sent();
                        return [4 /*yield*/, this.client.switchToParentFrame()];
                    case 11:
                        _c.sent();
                        return [3 /*break*/, 13];
                    case 12:
                        error_1 = _c.sent();
                        (0, utils_1.logOrRethrowError)(error_1);
                        return [3 /*break*/, 13];
                    case 13:
                        _i++;
                        return [3 /*break*/, 7];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    AxeBuilder.prototype.analyzePromise = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, client, axeSource, context, runPartialSupported, partials, error_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this, client = _a.client, axeSource = _a.axeSource;
                        context = (0, utils_1.normalizeContext)(this.includes, this.excludes, this.disableFrameSelectors);
                        return [4 /*yield*/, (0, utils_1.axeSourceInject)(client, axeSource)];
                    case 1:
                        runPartialSupported = _b.sent();
                        if (!(!runPartialSupported || this.legacyMode)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.runLegacy(context)];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3: return [4 /*yield*/, this.runPartialRecursive(context)];
                    case 4:
                        partials = _b.sent();
                        _b.label = 5;
                    case 5:
                        _b.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.finishRun(partials)];
                    case 6: return [2 /*return*/, _b.sent()];
                    case 7:
                        error_2 = _b.sent();
                        throw new Error("".concat(error_2.message, "\n Please check out ").concat(this.errorUrl));
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    AxeBuilder.prototype.runLegacy = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, client, option;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this, client = _a.client, option = _a.option;
                        return [4 /*yield*/, this.inject()];
                    case 1:
                        _b.sent();
                        return [2 /*return*/, (0, utils_1.axeRunLegacy)(client, context, option)];
                }
            });
        });
    };
    /**
     * Get a CSS selector for retrieving child iframes.
     */
    AxeBuilder.prototype.iframeSelector = function () {
        var selector = 'iframe';
        for (var _i = 0, _a = this.disableFrameSelectors; _i < _a.length; _i++) {
            var disableFrameSelector = _a[_i];
            selector += ":not(".concat(disableFrameSelector, ")");
        }
        return selector;
    };
    /**
     * Get a CSS selector for retrieving child frames.
     */
    AxeBuilder.prototype.frameSelector = function () {
        var selector = 'frame';
        for (var _i = 0, _a = this.disableFrameSelectors; _i < _a.length; _i++) {
            var disableFrameSelector = _a[_i];
            selector += ":not(".concat(disableFrameSelector, ")");
        }
        return selector;
    };
    /**
     * Set browsing context - when `null` sets top level page as context
     * - https://webdriver.io/docs/api/webdriver.html#switchtoframe
     */
    AxeBuilder.prototype.setBrowsingContext = function (id) {
        if (id === void 0) { id = null; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!id) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.client.switchToFrame(id)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.client.switchToParentFrame()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get partial results from the current context and its child frames
     * @param {ContextObject} context
     */
    AxeBuilder.prototype.runPartialRecursive = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var frameContexts, partials, _i, frameContexts_1, _a, frameSelector, frameContext, frame, _b, _c, _d, error_3;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4 /*yield*/, (0, utils_1.axeGetFrameContext)(this.client, context)];
                    case 1:
                        frameContexts = _e.sent();
                        return [4 /*yield*/, (0, utils_1.axeRunPartial)(this.client, context, this.option)];
                    case 2:
                        partials = [
                            _e.sent()
                        ];
                        _i = 0, frameContexts_1 = frameContexts;
                        _e.label = 3;
                    case 3:
                        if (!(_i < frameContexts_1.length)) return [3 /*break*/, 12];
                        _a = frameContexts_1[_i], frameSelector = _a.frameSelector, frameContext = _a.frameContext;
                        _e.label = 4;
                    case 4:
                        _e.trys.push([4, 9, , 11]);
                        return [4 /*yield*/, this.client.$(frameSelector)];
                    case 5:
                        frame = _e.sent();
                        (0, assert_1.default)(frame, "Expect frame of \"".concat(frameSelector, "\" to be defined"));
                        return [4 /*yield*/, this.client.switchToFrame(frame)];
                    case 6:
                        _e.sent();
                        return [4 /*yield*/, (0, utils_1.axeSourceInject)(this.client, this.script)];
                    case 7:
                        _e.sent();
                        _c = (_b = partials.push).apply;
                        _d = [partials];
                        return [4 /*yield*/, this.runPartialRecursive(frameContext)];
                    case 8:
                        _c.apply(_b, _d.concat([(_e.sent())]));
                        return [3 /*break*/, 11];
                    case 9:
                        error_3 = _e.sent();
                        partials.push(null);
                        return [4 /*yield*/, this.client.switchToParentFrame()];
                    case 10:
                        _e.sent();
                        return [3 /*break*/, 11];
                    case 11:
                        _i++;
                        return [3 /*break*/, 3];
                    case 12: return [4 /*yield*/, this.client.switchToParentFrame()];
                    case 13:
                        _e.sent();
                        return [2 /*return*/, partials];
                }
            });
        });
    };
    AxeBuilder.prototype.finishRun = function (partials) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, client, axeSource, option, win, newWindow, error_4, res;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this, client = _a.client, axeSource = _a.axeSource, option = _a.option;
                        return [4 /*yield*/, client.getWindowHandle()];
                    case 1:
                        win = _b.sent();
                        return [4 /*yield*/, client.createWindow('tab')];
                    case 2:
                        newWindow = _b.sent();
                        (0, assert_1.default)(newWindow.handle, 'Please make sure that you have popup blockers disabled.');
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 6, , 7]);
                        return [4 /*yield*/, client.switchToWindow(newWindow.handle)];
                    case 4:
                        _b.sent();
                        return [4 /*yield*/, client.url('about:blank')];
                    case 5:
                        _b.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        error_4 = _b.sent();
                        throw new Error("switchToWindow failed. Are you using updated browser drivers? \nDriver reported:\n".concat(error_4.message));
                    case 7: return [4 /*yield*/, (0, utils_1.axeFinishRun)(client, axeSource, partials, option)];
                    case 8:
                        res = _b.sent();
                        // Cleanup
                        return [4 /*yield*/, client.closeWindow()];
                    case 9:
                        // Cleanup
                        _b.sent();
                        return [4 /*yield*/, client.switchToWindow(win)];
                    case 10:
                        _b.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    return AxeBuilder;
}());
exports.default = AxeBuilder;
//# sourceMappingURL=index.js.map