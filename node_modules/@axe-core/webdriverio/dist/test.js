"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var webdriverio = __importStar(require("webdriverio"));
var sync_1 = __importDefault(require("@wdio/sync"));
var express_1 = __importDefault(require("express"));
var test_listen_1 = __importDefault(require("test-listen"));
var chai_1 = require("chai");
var chromedriver_1 = __importDefault(require("chromedriver"));
var path_1 = __importDefault(require("path"));
var http_1 = require("http");
var net_1 = __importDefault(require("net"));
var fs_1 = __importDefault(require("fs"));
var delay_1 = __importDefault(require("delay"));
var _1 = __importDefault(require("."));
var utils_1 = require("./utils");
var child_process_1 = __importDefault(require("child_process"));
var connectToChromeDriver = function (port) {
    var socket;
    return new Promise(function (resolve, reject) {
        // eslint-disable-next-line prefer-const
        // Give up after 1s
        var timer = setTimeout(function () {
            socket.destroy();
            reject(new Error('Unable to connect to ChromeDriver'));
        }, 1000);
        var connectionListener = function () {
            clearTimeout(timer);
            socket.destroy();
            return resolve();
        };
        socket = net_1.default.createConnection({ host: 'localhost', port: port }, connectionListener);
        // Fail on error
        socket.once('error', function (err) {
            clearTimeout(timer);
            socket.destroy();
            return reject(err);
        });
    });
};
describe('@axe-core/webdriverio', function () {
    var port;
    var _loop_1 = function (protocol) {
        if (protocol === 'webdriver') {
            port = 9515;
            var chromedriverProcess_1;
            before(function () { return __awaiter(void 0, void 0, void 0, function () {
                var path;
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            path = (_a = process.env.CHROMEDRIVER_PATH) !== null && _a !== void 0 ? _a : chromedriver_1.default.path;
                            chromedriverProcess_1 = child_process_1.default.spawn(path, ["--port=".concat(port)]);
                            chromedriverProcess_1.stdout.pipe(process.stdout);
                            chromedriverProcess_1.stderr.pipe(process.stderr);
                            return [4 /*yield*/, (0, delay_1.default)(500)];
                        case 1:
                            _b.sent();
                            return [4 /*yield*/, connectToChromeDriver(port)];
                        case 2:
                            _b.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
            after(function () {
                chromedriverProcess_1.kill();
            });
        }
        describe('WebdriverIO Async', function () {
            var server;
            var addr;
            var client;
            var axePath = require.resolve('axe-core');
            var axeSource = fs_1.default.readFileSync(axePath, 'utf8');
            var axeTestFixtures = path_1.default.resolve(__dirname, '..', 'fixtures', 'external');
            var axeLegacySource = fs_1.default.readFileSync(path_1.default.resolve(axeTestFixtures, 'axe-core@legacy.js'), 'utf-8');
            var axeCrasherSource = fs_1.default.readFileSync(path_1.default.join(axeTestFixtures, 'axe-crasher.js'), 'utf8');
            var axeForceLegacy = fs_1.default.readFileSync(path_1.default.join(axeTestFixtures, 'axe-force-legacy.js'), 'utf8');
            var axeLargePartial = fs_1.default.readFileSync(path_1.default.join(axeTestFixtures, 'axe-large-partial.js'), 'utf8');
            beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
                var app, binaryPath, options;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            app = (0, express_1.default)();
                            app.use(express_1.default.static(axeTestFixtures));
                            server = (0, http_1.createServer)(app);
                            return [4 /*yield*/, (0, test_listen_1.default)(server)];
                        case 1:
                            addr = _a.sent();
                            if (fs_1.default.existsSync("C:/Program Files/Google/Chrome/Application/chrome.exe")) {
                                binaryPath = "C:/Program Files/Google/Chrome/Application/chrome.exe";
                            }
                            options = {
                                path: '/',
                                automationProtocol: protocol,
                                capabilities: {
                                    browserName: 'chrome',
                                    'goog:chromeOptions': {
                                        args: ['--headless'],
                                        binary: binaryPath
                                    }
                                },
                                logLevel: 'error'
                            };
                            return [4 /*yield*/, webdriverio.remote(protocol === 'webdriver' ? __assign(__assign({}, options), { port: port }) : options)];
                        case 2:
                            client = _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
            afterEach(function () { return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, client.deleteSession()];
                        case 1:
                            _a.sent();
                            server.close();
                            return [2 /*return*/];
                    }
                });
            }); });
            describe('AxeBuilder', function () {
                if (protocol === 'devtools') {
                    it('check to make sure that client is running devtools protocol', function () {
                        chai_1.assert.isTrue(client.isDevTools);
                    });
                }
                if (protocol === 'webdriver') {
                    it('check to make sure that client is running webdriver protocol', function () {
                        // there is no `isWebdriver` option
                        chai_1.assert.isUndefined(client.isDevTools);
                    });
                }
                it('throws a useful error when not given a valid client', function () {
                    chai_1.assert.throws(function () { return new _1.default({ client: function () { return 'foobar'; } }); }, /An instantiated WebdriverIO client greater than v5 is required/);
                });
                describe('errorUrl', function () {
                    it('returns correct errorUrl', function () {
                        var errorUrl = new _1.default({ client: client }).errorUrl;
                        chai_1.assert.equal(errorUrl, 'https://github.com/dequelabs/axe-core-npm/blob/develop/packages/webdriverio/error-handling.md');
                    });
                });
                describe('for versions without axe.runPartial', function () {
                    describe('analyze', function () {
                        it('returns results axe-core4.2.3', function () { return __awaiter(void 0, void 0, void 0, function () {
                            var title, results;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                                    case 1:
                                        _a.sent();
                                        return [4 /*yield*/, client.getTitle()];
                                    case 2:
                                        title = _a.sent();
                                        return [4 /*yield*/, new _1.default({
                                                client: client,
                                                axeSource: axeLegacySource
                                            }).analyze()];
                                    case 3:
                                        results = _a.sent();
                                        chai_1.assert.notEqual(title, 'Error');
                                        chai_1.assert.isNotNull(results);
                                        chai_1.assert.isArray(results.violations);
                                        chai_1.assert.isArray(results.incomplete);
                                        chai_1.assert.isArray(results.passes);
                                        chai_1.assert.isArray(results.inapplicable);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        it('throws if axe errors out on the top window', function () { return __awaiter(void 0, void 0, void 0, function () {
                            var error, title, e_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        error = null;
                                        return [4 /*yield*/, client.url("".concat(addr, "/crash.html"))];
                                    case 1:
                                        _a.sent();
                                        return [4 /*yield*/, client.getTitle()];
                                    case 2:
                                        title = _a.sent();
                                        _a.label = 3;
                                    case 3:
                                        _a.trys.push([3, 5, , 6]);
                                        return [4 /*yield*/, new _1.default({
                                                client: client,
                                                axeSource: axeLegacySource + axeCrasherSource
                                            }).analyze()];
                                    case 4:
                                        _a.sent();
                                        return [3 /*break*/, 6];
                                    case 5:
                                        e_1 = _a.sent();
                                        error = e_1;
                                        return [3 /*break*/, 6];
                                    case 6:
                                        chai_1.assert.notEqual(title, 'Error');
                                        chai_1.assert.isNotNull(error);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        it('tests cross-origin pages', function () { return __awaiter(void 0, void 0, void 0, function () {
                            var title, results, frameTested;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, client.url("".concat(addr, "/cross-origin.html"))];
                                    case 1:
                                        _a.sent();
                                        return [4 /*yield*/, client.getTitle()];
                                    case 2:
                                        title = _a.sent();
                                        return [4 /*yield*/, new _1.default({
                                                client: client,
                                                axeSource: axeLegacySource
                                            })
                                                .withRules(['frame-tested'])
                                                .analyze()];
                                    case 3:
                                        results = _a.sent();
                                        frameTested = results.incomplete.find(function (_a) {
                                            var id = _a.id;
                                            return id === 'frame-tested';
                                        });
                                        chai_1.assert.notEqual(title, 'Error');
                                        chai_1.assert.isUndefined(frameTested);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                    });
                    describe('disableFrames', function () {
                        it('does not return results from disabled iframes', function () { return __awaiter(void 0, void 0, void 0, function () {
                            var title, violations, nodes;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, client.url("".concat(addr, "/nested-iframes.html"))];
                                    case 1:
                                        _a.sent();
                                        return [4 /*yield*/, client.getTitle()];
                                    case 2:
                                        title = _a.sent();
                                        return [4 /*yield*/, new _1.default({
                                                client: client,
                                                axeSource: axeLegacySource
                                            })
                                                .withRules('label')
                                                .disableFrame('[src*="iframes/baz.html"]')
                                                .analyze()];
                                    case 3:
                                        violations = (_a.sent()).violations;
                                        chai_1.assert.notEqual(title, 'Error');
                                        chai_1.assert.equal(violations[0].id, 'label');
                                        nodes = violations[0].nodes;
                                        chai_1.assert.lengthOf(nodes, 3);
                                        chai_1.assert.deepEqual(nodes[0].target, [
                                            '#ifr-foo',
                                            '#foo-bar',
                                            '#bar-baz',
                                            'input'
                                        ]);
                                        chai_1.assert.deepEqual(nodes[1].target, [
                                            '#ifr-foo',
                                            '#foo-baz',
                                            'input'
                                        ]);
                                        chai_1.assert.deepEqual(nodes[2].target, [
                                            '#ifr-bar',
                                            '#bar-baz',
                                            'input'
                                        ]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        it('does not error when disabled iframe does not exist', function () { return __awaiter(void 0, void 0, void 0, function () {
                            var title, violations, nodes;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, client.url("".concat(addr, "/nested-iframes.html"))];
                                    case 1:
                                        _a.sent();
                                        return [4 /*yield*/, client.getTitle()];
                                    case 2:
                                        title = _a.sent();
                                        return [4 /*yield*/, new _1.default({
                                                client: client,
                                                axeSource: axeLegacySource
                                            })
                                                .withRules('label')
                                                .disableFrame('[src*="does-not-exist.html"]')
                                                .analyze()];
                                    case 3:
                                        violations = (_a.sent()).violations;
                                        chai_1.assert.notEqual(title, 'Error');
                                        chai_1.assert.equal(violations[0].id, 'label');
                                        nodes = violations[0].nodes;
                                        chai_1.assert.lengthOf(nodes, 4);
                                        chai_1.assert.deepEqual(nodes[0].target, [
                                            '#ifr-foo',
                                            '#foo-bar',
                                            '#bar-baz',
                                            'input'
                                        ]);
                                        chai_1.assert.deepEqual(nodes[1].target, [
                                            '#ifr-foo',
                                            '#foo-baz',
                                            'input'
                                        ]);
                                        chai_1.assert.deepEqual(nodes[2].target, [
                                            '#ifr-bar',
                                            '#bar-baz',
                                            'input'
                                        ]);
                                        chai_1.assert.deepEqual(nodes[3].target, ['#ifr-baz', 'input']);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        it('does not return results from disabled framesets', function () { return __awaiter(void 0, void 0, void 0, function () {
                            var title, violations, nodes;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, client.url("".concat(addr, "/nested-frameset.html"))];
                                    case 1:
                                        _a.sent();
                                        return [4 /*yield*/, client.getTitle()];
                                    case 2:
                                        title = _a.sent();
                                        return [4 /*yield*/, new _1.default({
                                                client: client,
                                                axeSource: axeLegacySource
                                            })
                                                .withRules('label')
                                                .disableFrame('[src*="frameset/baz.html"]')
                                                .analyze()];
                                    case 3:
                                        violations = (_a.sent()).violations;
                                        chai_1.assert.notEqual(title, 'Error');
                                        chai_1.assert.equal(violations[0].id, 'label');
                                        nodes = violations[0].nodes;
                                        chai_1.assert.lengthOf(nodes, 3);
                                        chai_1.assert.deepEqual(nodes[0].target, [
                                            '#frm-foo',
                                            '#foo-bar',
                                            '#bar-baz',
                                            'input'
                                        ]);
                                        chai_1.assert.deepEqual(nodes[1].target, [
                                            '#frm-foo',
                                            '#foo-baz',
                                            'input'
                                        ]);
                                        chai_1.assert.deepEqual(nodes[2].target, [
                                            '#frm-bar',
                                            '#bar-baz',
                                            'input'
                                        ]);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        it('does not error when disabled frameset does not exist', function () { return __awaiter(void 0, void 0, void 0, function () {
                            var title, violations, nodes;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, client.url("".concat(addr, "/nested-frameset.html"))];
                                    case 1:
                                        _a.sent();
                                        return [4 /*yield*/, client.getTitle()];
                                    case 2:
                                        title = _a.sent();
                                        return [4 /*yield*/, new _1.default({
                                                client: client,
                                                axeSource: axeLegacySource
                                            })
                                                .withRules('label')
                                                .disableFrame('[src*="does-not-exist.html"]')
                                                .analyze()];
                                    case 3:
                                        violations = (_a.sent()).violations;
                                        chai_1.assert.notEqual(title, 'Error');
                                        chai_1.assert.equal(violations[0].id, 'label');
                                        nodes = violations[0].nodes;
                                        chai_1.assert.lengthOf(nodes, 4);
                                        chai_1.assert.deepEqual(nodes[0].target, [
                                            '#frm-foo',
                                            '#foo-bar',
                                            '#bar-baz',
                                            'input'
                                        ]);
                                        chai_1.assert.deepEqual(nodes[1].target, [
                                            '#frm-foo',
                                            '#foo-baz',
                                            'input'
                                        ]);
                                        chai_1.assert.deepEqual(nodes[2].target, [
                                            '#frm-bar',
                                            '#bar-baz',
                                            'input'
                                        ]);
                                        chai_1.assert.deepEqual(nodes[3].target, ['#frm-baz', 'input']);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                    });
                    it('reports frame-tested', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, results;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/crash-parent.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({
                                            client: client,
                                            axeSource: axeLegacySource + axeCrasherSource
                                        })
                                            .options({ runOnly: ['label', 'frame-tested'] })
                                            .analyze()];
                                case 3:
                                    results = _a.sent();
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.equal(results.incomplete[0].id, 'frame-tested');
                                    chai_1.assert.lengthOf(results.incomplete[0].nodes, 1);
                                    chai_1.assert.equal(results.violations[0].id, 'label');
                                    chai_1.assert.lengthOf(results.violations[0].nodes, 2);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                });
                describe('analyze', function () {
                    describe('axeSource', function () {
                        it('returns results with different version of axeSource', function () { return __awaiter(void 0, void 0, void 0, function () {
                            var title, results;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                                    case 1:
                                        _a.sent();
                                        return [4 /*yield*/, client.getTitle()];
                                    case 2:
                                        title = _a.sent();
                                        return [4 /*yield*/, new _1.default({
                                                client: client,
                                                axeSource: axeLegacySource
                                            }).analyze()];
                                    case 3:
                                        results = _a.sent();
                                        chai_1.assert.notEqual(title, 'Error');
                                        chai_1.assert.isNotNull(results);
                                        chai_1.assert.strictEqual(results.testEngine.version, '4.2.3');
                                        chai_1.assert.isArray(results.violations);
                                        chai_1.assert.isArray(results.incomplete);
                                        chai_1.assert.isArray(results.passes);
                                        chai_1.assert.isArray(results.inapplicable);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                    });
                    it('returns results', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, results;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client }).analyze()];
                                case 3:
                                    results = _a.sent();
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isNotNull(results);
                                    chai_1.assert.isArray(results.violations);
                                    chai_1.assert.isArray(results.incomplete);
                                    chai_1.assert.isArray(results.passes);
                                    chai_1.assert.isArray(results.inapplicable);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('reports frame-tested', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, results;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/crash-parent.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({
                                            client: client,
                                            axeSource: axeSource + axeCrasherSource
                                        })
                                            .options({ runOnly: ['label', 'frame-tested'] })
                                            .analyze()];
                                case 3:
                                    results = _a.sent();
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.equal(results.incomplete[0].id, 'frame-tested');
                                    chai_1.assert.lengthOf(results.incomplete[0].nodes, 1);
                                    chai_1.assert.equal(results.violations[0].id, 'label');
                                    chai_1.assert.lengthOf(results.violations[0].nodes, 2);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('throws if axe errors out on the top window', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var error, title, e_2;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    error = null;
                                    return [4 /*yield*/, client.url("".concat(addr, "/crash.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    chai_1.assert.notEqual(title, 'Error');
                                    _a.label = 3;
                                case 3:
                                    _a.trys.push([3, 5, , 6]);
                                    return [4 /*yield*/, new _1.default({
                                            client: client,
                                            axeSource: axeSource + axeCrasherSource
                                        }).analyze()];
                                case 4:
                                    _a.sent();
                                    return [3 /*break*/, 6];
                                case 5:
                                    e_2 = _a.sent();
                                    error = e_2;
                                    return [3 /*break*/, 6];
                                case 6:
                                    chai_1.assert.isNotNull(error);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('throws when injecting a problematic source', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var error, title, e_3;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    error = null;
                                    return [4 /*yield*/, client.url("".concat(addr, "/crash.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    _a.label = 3;
                                case 3:
                                    _a.trys.push([3, 5, , 6]);
                                    return [4 /*yield*/, new _1.default({
                                            client: client,
                                            axeSource: 'throw new Error()'
                                        }).analyze()];
                                case 4:
                                    _a.sent();
                                    return [3 /*break*/, 6];
                                case 5:
                                    e_3 = _a.sent();
                                    error = e_3;
                                    return [3 /*break*/, 6];
                                case 6:
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isNotNull(error);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('throws when a setup fails', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var error, brokenSource, title, e_4;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    error = null;
                                    brokenSource = axeSource + ";window.axe.utils = {};";
                                    return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    _a.label = 3;
                                case 3:
                                    _a.trys.push([3, 5, , 6]);
                                    return [4 /*yield*/, new _1.default({ client: client, axeSource: brokenSource })
                                            .withRules('label')
                                            .analyze()];
                                case 4:
                                    _a.sent();
                                    return [3 /*break*/, 6];
                                case 5:
                                    e_4 = _a.sent();
                                    error = e_4;
                                    return [3 /*break*/, 6];
                                case 6:
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isNotNull(error);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('properly isolates the call to axe.finishRun', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var error, title, e_5;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    error = null;
                                    return [4 /*yield*/, client.url("".concat(addr, "/isolated-finish.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    _a.label = 3;
                                case 3:
                                    _a.trys.push([3, 5, , 6]);
                                    return [4 /*yield*/, new _1.default({ client: client }).analyze()];
                                case 4:
                                    _a.sent();
                                    return [3 /*break*/, 6];
                                case 5:
                                    e_5 = _a.sent();
                                    error = e_5;
                                    return [3 /*break*/, 6];
                                case 6:
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isNull(error);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('handles large results', function () {
                        return __awaiter(this, void 0, void 0, function () {
                            var results;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        /* this test handles a large amount of partial results a timeout may be required */
                                        this.timeout(100000);
                                        return [4 /*yield*/, client.url("".concat(addr, "/external/index.html"))];
                                    case 1:
                                        _a.sent();
                                        return [4 /*yield*/, new _1.default({
                                                client: client,
                                                axeSource: axeSource + axeLargePartial
                                            }).analyze()];
                                    case 2:
                                        results = _a.sent();
                                        chai_1.assert.lengthOf(results.passes, 1);
                                        chai_1.assert.equal(results.passes[0].id, 'duplicate-id');
                                        return [2 /*return*/];
                                }
                            });
                        });
                    });
                    it('returns correct results metadata', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, results;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client }).analyze()];
                                case 3:
                                    results = _a.sent();
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isDefined(results.testEngine.name);
                                    chai_1.assert.isDefined(results.testEngine.version);
                                    chai_1.assert.isDefined(results.testEnvironment.orientationAngle);
                                    chai_1.assert.isDefined(results.testEnvironment.orientationType);
                                    chai_1.assert.isDefined(results.testEnvironment.userAgent);
                                    chai_1.assert.isDefined(results.testEnvironment.windowHeight);
                                    chai_1.assert.isDefined(results.testEnvironment.windowWidth);
                                    chai_1.assert.isDefined(results.testRunner.name);
                                    chai_1.assert.isDefined(results.toolOptions.reporter);
                                    chai_1.assert.equal(results.url, "".concat(addr, "/index.html"));
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('returns the same results from runPartial as from legacy mode', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, legacyResults, normalResults;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/nested-iframes.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({
                                            axeSource: axeSource + axeForceLegacy,
                                            client: client
                                        }).analyze()];
                                case 3:
                                    legacyResults = _a.sent();
                                    chai_1.assert.equal(legacyResults.testEngine.name, 'axe-legacy');
                                    return [4 /*yield*/, new _1.default({
                                            axeSource: axeSource,
                                            client: client
                                        }).analyze()];
                                case 4:
                                    normalResults = _a.sent();
                                    normalResults.timestamp = legacyResults.timestamp;
                                    normalResults.testEngine.name = legacyResults.testEngine.name;
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.deepEqual(normalResults, legacyResults);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                });
                describe('disableFrame', function () {
                    it('does not inject into disabled iframes', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, violations, nodes;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/nested-iframes.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .withRules('label')
                                            .disableFrame('[src*="iframes/baz.html"]')
                                            .analyze()];
                                case 3:
                                    violations = (_a.sent()).violations;
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.equal(violations[0].id, 'label');
                                    nodes = violations[0].nodes;
                                    chai_1.assert.lengthOf(nodes, 3);
                                    chai_1.assert.deepEqual(nodes[0].target, [
                                        '#ifr-foo',
                                        '#foo-bar',
                                        '#bar-baz',
                                        'input'
                                    ]);
                                    chai_1.assert.deepEqual(nodes[1].target, [
                                        '#ifr-foo',
                                        '#foo-baz',
                                        'input'
                                    ]);
                                    chai_1.assert.deepEqual(nodes[2].target, [
                                        '#ifr-bar',
                                        '#bar-baz',
                                        'input'
                                    ]);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('does not error when disabled iframe does not exist', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, violations, nodes;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/nested-iframes.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .options({ runOnly: 'label' })
                                            .disableFrame('[src*="does-not-exist.html"]')
                                            .analyze()];
                                case 3:
                                    violations = (_a.sent()).violations;
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.equal(violations[0].id, 'label');
                                    nodes = violations[0].nodes;
                                    chai_1.assert.lengthOf(nodes, 4);
                                    chai_1.assert.deepEqual(nodes[0].target, [
                                        '#ifr-foo',
                                        '#foo-bar',
                                        '#bar-baz',
                                        'input'
                                    ]);
                                    chai_1.assert.deepEqual(nodes[1].target, [
                                        '#ifr-foo',
                                        '#foo-baz',
                                        'input'
                                    ]);
                                    chai_1.assert.deepEqual(nodes[2].target, [
                                        '#ifr-bar',
                                        '#bar-baz',
                                        'input'
                                    ]);
                                    chai_1.assert.deepEqual(nodes[3].target, ['#ifr-baz', 'input']);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('does not inject into disabled frameset', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, violations, nodes;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/nested-frameset.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .withRules('label')
                                            .disableFrame('[src*="frameset/baz.html"]')
                                            .analyze()];
                                case 3:
                                    violations = (_a.sent()).violations;
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.equal(violations[0].id, 'label');
                                    nodes = violations[0].nodes;
                                    chai_1.assert.lengthOf(nodes, 3);
                                    chai_1.assert.deepEqual(nodes[0].target, [
                                        '#frm-foo',
                                        '#foo-bar',
                                        '#bar-baz',
                                        'input'
                                    ]);
                                    chai_1.assert.deepEqual(nodes[1].target, [
                                        '#frm-foo',
                                        '#foo-baz',
                                        'input'
                                    ]);
                                    chai_1.assert.deepEqual(nodes[2].target, [
                                        '#frm-bar',
                                        '#bar-baz',
                                        'input'
                                    ]);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('does not error when disabled frameset does not exist', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, violations, nodes;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/nested-frameset.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .options({ runOnly: 'label' })
                                            .disableFrame('[src*="does-not-exist.html"]')
                                            .analyze()];
                                case 3:
                                    violations = (_a.sent()).violations;
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.equal(violations[0].id, 'label');
                                    nodes = violations[0].nodes;
                                    chai_1.assert.lengthOf(nodes, 4);
                                    chai_1.assert.deepEqual(nodes[0].target, [
                                        '#frm-foo',
                                        '#foo-bar',
                                        '#bar-baz',
                                        'input'
                                    ]);
                                    chai_1.assert.deepEqual(nodes[1].target, [
                                        '#frm-foo',
                                        '#foo-baz',
                                        'input'
                                    ]);
                                    chai_1.assert.deepEqual(nodes[2].target, [
                                        '#frm-bar',
                                        '#bar-baz',
                                        'input'
                                    ]);
                                    chai_1.assert.deepEqual(nodes[3].target, ['#frm-baz', 'input']);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                });
                describe('disableRules', function () {
                    it('disables the given rules(s) as array', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, results, all;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .disableRules(['region'])
                                            .analyze()];
                                case 3:
                                    results = _a.sent();
                                    all = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], results.passes, true), results.inapplicable, true), results.violations, true), results.incomplete, true);
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isTrue(!all.find(function (r) { return r.id === 'region'; }));
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('disables the given rules(s) as string', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, results, all;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .disableRules('region')
                                            .analyze()];
                                case 3:
                                    results = _a.sent();
                                    all = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], results.passes, true), results.inapplicable, true), results.violations, true), results.incomplete, true);
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isTrue(!all.find(function (r) { return r.id === 'region'; }));
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                });
                describe('frame tests', function () {
                    it('injects into nested iframes', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, violations, nodes;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/nested-iframes.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .options({ runOnly: 'label' })
                                            .analyze()];
                                case 3:
                                    violations = (_a.sent()).violations;
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.equal(violations[0].id, 'label');
                                    nodes = violations[0].nodes;
                                    chai_1.assert.lengthOf(nodes, 4);
                                    chai_1.assert.deepEqual(nodes[0].target, [
                                        '#ifr-foo',
                                        '#foo-bar',
                                        '#bar-baz',
                                        'input'
                                    ]);
                                    chai_1.assert.deepEqual(nodes[1].target, [
                                        '#ifr-foo',
                                        '#foo-baz',
                                        'input'
                                    ]);
                                    chai_1.assert.deepEqual(nodes[2].target, [
                                        '#ifr-bar',
                                        '#bar-baz',
                                        'input'
                                    ]);
                                    chai_1.assert.deepEqual(nodes[3].target, ['#ifr-baz', 'input']);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('injects into nested frameset', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, violations, nodes;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/nested-frameset.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .options({ runOnly: 'label' })
                                            .analyze()];
                                case 3:
                                    violations = (_a.sent()).violations;
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.equal(violations[0].id, 'label');
                                    chai_1.assert.lengthOf(violations[0].nodes, 4);
                                    nodes = violations[0].nodes;
                                    chai_1.assert.deepEqual(nodes[0].target, [
                                        '#frm-foo',
                                        '#foo-bar',
                                        '#bar-baz',
                                        'input'
                                    ]);
                                    chai_1.assert.deepEqual(nodes[1].target, [
                                        '#frm-foo',
                                        '#foo-baz',
                                        'input'
                                    ]);
                                    chai_1.assert.deepEqual(nodes[2].target, [
                                        '#frm-bar',
                                        '#bar-baz',
                                        'input'
                                    ]);
                                    chai_1.assert.deepEqual(nodes[3].target, ['#frm-baz', 'input']);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('should not work on shadow DOM iframes', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, _a, violations, incomplete, nodes;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/shadow-frames.html"))];
                                case 1:
                                    _b.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _b.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .options({ runOnly: ['label', 'frame-tested'] })
                                            .analyze()];
                                case 3:
                                    _a = _b.sent(), violations = _a.violations, incomplete = _a.incomplete;
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.equal(violations[0].id, 'label');
                                    chai_1.assert.lengthOf(violations[0].nodes, 2);
                                    nodes = violations[0].nodes;
                                    chai_1.assert.deepEqual(nodes[0].target, ['#light-frame', 'input']);
                                    chai_1.assert.deepEqual(nodes[1].target, ['#slotted-frame', 'input']);
                                    chai_1.assert.lengthOf(incomplete, 1);
                                    chai_1.assert.lengthOf(incomplete[0].nodes, 1);
                                    chai_1.assert.deepEqual(incomplete[0].nodes[0].target, [
                                        ['#shadow-root', '#shadow-frame']
                                    ]);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('reports erroring frames in frame-tested', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, results;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/crash-parent.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({
                                            client: client,
                                            axeSource: axeSource + axeCrasherSource
                                        })
                                            .options({ runOnly: ['label', 'frame-tested'] })
                                            .analyze()];
                                case 3:
                                    results = _a.sent();
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.equal(results.incomplete[0].id, 'frame-tested');
                                    chai_1.assert.lengthOf(results.incomplete[0].nodes, 1);
                                    chai_1.assert.deepEqual(results.incomplete[0].nodes[0].target, [
                                        '#ifr-crash'
                                    ]);
                                    chai_1.assert.equal(results.violations[0].id, 'label');
                                    chai_1.assert.lengthOf(results.violations[0].nodes, 2);
                                    chai_1.assert.deepEqual(results.violations[0].nodes[0].target, [
                                        '#ifr-bar',
                                        '#bar-baz',
                                        'input'
                                    ]);
                                    chai_1.assert.deepEqual(results.violations[0].nodes[1].target, [
                                        '#ifr-baz',
                                        'input'
                                    ]);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('returns the same results from runPartial as from legacy mode', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, legacyResults, normalResults;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/nested-iframes.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({
                                            client: client,
                                            axeSource: axeSource + axeForceLegacy
                                        }).analyze()];
                                case 3:
                                    legacyResults = _a.sent();
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.equal(legacyResults.testEngine.name, 'axe-legacy');
                                    return [4 /*yield*/, new _1.default({
                                            client: client,
                                            axeSource: axeSource
                                        }).analyze()];
                                case 4:
                                    normalResults = _a.sent();
                                    normalResults.timestamp = legacyResults.timestamp;
                                    normalResults.testEngine.name = legacyResults.testEngine.name;
                                    chai_1.assert.deepEqual(normalResults, legacyResults);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                });
                describe('logOrRethrowError', function () {
                    it('log a StaleElementReference Error with `seleniumStack`', function () {
                        var error = new Error('Selenium Error');
                        error.seleniumStack = {
                            type: 'StaleElementReference'
                        };
                        chai_1.assert.doesNotThrow(function () { return (0, utils_1.logOrRethrowError)(error); });
                    });
                    it('log a `stale element reference` Error', function () {
                        var error = new Error('foobar');
                        error.name = 'stale element reference';
                        chai_1.assert.doesNotThrow(function () { return (0, utils_1.logOrRethrowError)(error); });
                    });
                    it('throws errors that are not StaleElementReferenceErrors', function () {
                        var error = new Error('foo');
                        chai_1.assert.throws(function () { return (0, utils_1.logOrRethrowError)(error); });
                    });
                    it('throws if non-Error content is passed', function () {
                        chai_1.assert.throws(function () { return (0, utils_1.logOrRethrowError)('error'); });
                    });
                });
                describe('withRules', function () {
                    it('only runs the provided rules as an array', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, results, all;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .withRules(['region'])
                                            .analyze()];
                                case 3:
                                    results = _a.sent();
                                    all = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], results.passes, true), results.inapplicable, true), results.violations, true), results.incomplete, true);
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.strictEqual(all.length, 1);
                                    chai_1.assert.strictEqual(all[0].id, 'region');
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('only runs the provided rules as a string', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, results, all;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .withRules('region')
                                            .analyze()];
                                case 3:
                                    results = _a.sent();
                                    all = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], results.passes, true), results.inapplicable, true), results.violations, true), results.incomplete, true);
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.strictEqual(all.length, 1);
                                    chai_1.assert.strictEqual(all[0].id, 'region');
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                });
                describe('options', function () {
                    it('passes options to axe-core', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, results, all;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .options({ rules: { region: { enabled: false } } })
                                            .analyze()];
                                case 3:
                                    results = _a.sent();
                                    all = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], results.passes, true), results.inapplicable, true), results.violations, true), results.incomplete, true);
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isTrue(!all.find(function (r) { return r.id === 'region'; }));
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                });
                describe('withTags', function () {
                    it('only rules rules with the given tag(s) as an array', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, results, all, _i, all_1, rule;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .withTags(['best-practice'])
                                            .analyze()];
                                case 3:
                                    results = _a.sent();
                                    all = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], results.passes, true), results.inapplicable, true), results.violations, true), results.incomplete, true);
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isOk(all);
                                    for (_i = 0, all_1 = all; _i < all_1.length; _i++) {
                                        rule = all_1[_i];
                                        chai_1.assert.include(rule.tags, 'best-practice');
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('only rules rules with the given tag(s) as a string', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, results, all, _i, all_2, rule;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .withTags('best-practice')
                                            .analyze()];
                                case 3:
                                    results = _a.sent();
                                    all = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], results.passes, true), results.inapplicable, true), results.violations, true), results.incomplete, true);
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isOk(all);
                                    for (_i = 0, all_2 = all; _i < all_2.length; _i++) {
                                        rule = all_2[_i];
                                        chai_1.assert.include(rule.tags, 'best-practice');
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('No results provided when the given tag(s) is invalid', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, results, all;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .withTags(['foobar'])
                                            .analyze()];
                                case 3:
                                    results = _a.sent();
                                    all = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], results.passes, true), results.inapplicable, true), results.violations, true), results.incomplete, true);
                                    chai_1.assert.notEqual(title, 'Error');
                                    // Ensure all run rules had the "foobar" tag
                                    chai_1.assert.lengthOf(all, 0);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                });
                describe('include/exclude', function () {
                    var flatPassesTargets = function (results) {
                        return results.passes
                            .reduce(function (acc, pass) {
                            return acc.concat(pass.nodes);
                        }, [])
                            .reduce(function (acc, node) {
                            return acc.concat(node.target.flat(1));
                        }, []);
                    };
                    it('with include and exclude', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, builder, results;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/context-include-exclude.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    builder = new _1.default({ client: client })
                                        .include('.include')
                                        .exclude('.exclude');
                                    return [4 /*yield*/, builder.analyze()];
                                case 3:
                                    results = _a.sent();
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isTrue(flatPassesTargets(results).includes('.include'));
                                    chai_1.assert.isFalse(flatPassesTargets(results).includes('.exclude'));
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('with only include', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, builder, results;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/context-include-exclude.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    builder = new _1.default({ client: client }).include('.include');
                                    return [4 /*yield*/, builder.analyze()];
                                case 3:
                                    results = _a.sent();
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isTrue(flatPassesTargets(results).includes('.include'));
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('with only exclude', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, builder, results;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/context-include-exclude.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    builder = new _1.default({ client: client }).exclude('.exclude');
                                    return [4 /*yield*/, builder.analyze()];
                                case 3:
                                    results = _a.sent();
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isFalse(flatPassesTargets(results).includes('.exclude'));
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('with only chaining include', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, builder, results;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/context-include-exclude.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    builder = new _1.default({ client: client })
                                        .include('.include')
                                        .include('.include2');
                                    return [4 /*yield*/, builder.analyze()];
                                case 3:
                                    results = _a.sent();
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isTrue(flatPassesTargets(results).includes('.include'));
                                    chai_1.assert.isTrue(flatPassesTargets(results).includes('.include2'));
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('with only chaining exclude', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, builder, results;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/context-include-exclude.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    builder = new _1.default({ client: client })
                                        .exclude('.exclude')
                                        .exclude('.exclude2');
                                    return [4 /*yield*/, builder.analyze()];
                                case 3:
                                    results = _a.sent();
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isFalse(flatPassesTargets(results).includes('.exclude'));
                                    chai_1.assert.isFalse(flatPassesTargets(results).includes('.exclude2'));
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('with chaining include and exclude', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, builder, results;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/context-include-exclude.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    builder = new _1.default({ client: client })
                                        .include('.include')
                                        .include('.include2')
                                        .exclude('.exclude')
                                        .exclude('.exclude2');
                                    return [4 /*yield*/, builder.analyze()];
                                case 3:
                                    results = _a.sent();
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isTrue(flatPassesTargets(results).includes('.include'));
                                    chai_1.assert.isTrue(flatPassesTargets(results).includes('.include2'));
                                    chai_1.assert.isFalse(flatPassesTargets(results).includes('.exclude'));
                                    chai_1.assert.isFalse(flatPassesTargets(results).includes('.exclude2'));
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('with include and exclude iframes', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, builder, results, labelResult;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/context-include-exclude.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    builder = new _1.default({ client: client })
                                        .include(['#ifr-inc-excl', 'html'])
                                        .exclude(['#ifr-inc-excl', '#foo-bar'])
                                        .include(['#ifr-inc-excl', '#foo-baz', 'html'])
                                        .exclude(['#ifr-inc-excl', '#foo-baz', 'input']);
                                    return [4 /*yield*/, builder.analyze()];
                                case 3:
                                    results = _a.sent();
                                    labelResult = results.incomplete.find(function (_a) {
                                        var id = _a.id;
                                        return id === 'label';
                                    });
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isFalse(flatPassesTargets(results).includes('#foo-bar'));
                                    chai_1.assert.isFalse(flatPassesTargets(results).includes('input'));
                                    chai_1.assert.isUndefined(labelResult);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('with include and exclude iframes', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, builder, results, labelResult;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/context-include-exclude.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    builder = new _1.default({ client: client })
                                        .include(['#ifr-inc-excl', '#foo-baz', 'html'])
                                        .include(['#ifr-inc-excl', '#foo-baz', 'input'])
                                        // does not exist
                                        .include(['#hazaar', 'html']);
                                    return [4 /*yield*/, builder.analyze()];
                                case 3:
                                    results = _a.sent();
                                    labelResult = results.violations.find(function (_a) {
                                        var id = _a.id;
                                        return id === 'label';
                                    });
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isTrue(flatPassesTargets(results).includes('#ifr-inc-excl'));
                                    chai_1.assert.isTrue(flatPassesTargets(results).includes('#foo-baz'));
                                    chai_1.assert.isTrue(flatPassesTargets(results).includes('input'));
                                    chai_1.assert.isFalse(flatPassesTargets(results).includes('#foo-bar'));
                                    // does not exist
                                    chai_1.assert.isFalse(flatPassesTargets(results).includes('#hazaar'));
                                    chai_1.assert.isDefined(labelResult);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('with labelled frame', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var results, labelResult;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/context-include-exclude.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .include({ fromFrames: ['#ifr-inc-excl', 'html'] })
                                            .exclude({ fromFrames: ['#ifr-inc-excl', '#foo-bar'] })
                                            .include({ fromFrames: ['#ifr-inc-excl', '#foo-baz', 'html'] })
                                            .exclude({ fromFrames: ['#ifr-inc-excl', '#foo-baz', 'input'] })
                                            .analyze()];
                                case 2:
                                    results = _a.sent();
                                    labelResult = results.violations.find(function (r) { return r.id === 'label'; });
                                    chai_1.assert.isFalse(flatPassesTargets(results).includes('#foo-bar'));
                                    chai_1.assert.isFalse(flatPassesTargets(results).includes('input'));
                                    chai_1.assert.isUndefined(labelResult);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('with include shadow DOM', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var results;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/shadow-dom.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .include([['#shadow-root-1', '#shadow-button-1']])
                                            .include([['#shadow-root-2', '#shadow-button-2']])
                                            .analyze()];
                                case 2:
                                    results = _a.sent();
                                    chai_1.assert.isTrue(flatPassesTargets(results).includes('#shadow-button-1'));
                                    chai_1.assert.isTrue(flatPassesTargets(results).includes('#shadow-button-2'));
                                    chai_1.assert.isFalse(flatPassesTargets(results).includes('#button'));
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('with exclude shadow DOM', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var results;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/shadow-dom.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .exclude([['#shadow-root-1', '#shadow-button-1']])
                                            .exclude([['#shadow-root-2', '#shadow-button-2']])
                                            .analyze()];
                                case 2:
                                    results = _a.sent();
                                    chai_1.assert.isFalse(flatPassesTargets(results).includes('#shadow-button-1'));
                                    chai_1.assert.isFalse(flatPassesTargets(results).includes('#shadow-button-2'));
                                    chai_1.assert.isTrue(flatPassesTargets(results).includes('#button'));
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('with labelled shadow DOM', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var results;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/shadow-dom.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .include({
                                            fromShadowDom: ['#shadow-root-1', '#shadow-button-1']
                                        })
                                            .exclude({
                                            fromShadowDom: ['#shadow-root-2', '#shadow-button-2']
                                        })
                                            .analyze()];
                                case 2:
                                    results = _a.sent();
                                    chai_1.assert.isTrue(flatPassesTargets(results).includes('#shadow-button-1'));
                                    chai_1.assert.isFalse(flatPassesTargets(results).includes('#shadow-button-2'));
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('with labelled iframe and shadow DOM', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var violations, nodes;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/shadow-frames.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .exclude({
                                            fromFrames: [
                                                {
                                                    fromShadowDom: ['#shadow-root', '#shadow-frame']
                                                },
                                                'input'
                                            ]
                                        })
                                            .options({ runOnly: 'label' })
                                            .analyze()];
                                case 2:
                                    violations = (_a.sent()).violations;
                                    chai_1.assert.equal(violations[0].id, 'label');
                                    chai_1.assert.lengthOf(violations[0].nodes, 2);
                                    nodes = violations[0].nodes;
                                    chai_1.assert.deepEqual(nodes[0].target, ['#light-frame', 'input']);
                                    chai_1.assert.deepEqual(nodes[1].target, ['#slotted-frame', 'input']);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                });
                describe('setLegacyMode', function () {
                    var runPartialThrows = ";axe.runPartial = () => { throw new Error(\"No runPartial\")}";
                    it('runs legacy mode when used', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, results;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({
                                            client: client,
                                            axeSource: axeSource + runPartialThrows
                                        })
                                            .setLegacyMode()
                                            .analyze()];
                                case 3:
                                    results = _a.sent();
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isNotNull(results);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('prevents cross-origin frame testing', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, results, frameTested;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/cross-origin.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({
                                            client: client,
                                            axeSource: axeSource + runPartialThrows
                                        })
                                            .withRules('frame-tested')
                                            .setLegacyMode()
                                            .analyze()];
                                case 3:
                                    results = _a.sent();
                                    frameTested = results.incomplete.find(function (_a) {
                                        var id = _a.id;
                                        return id === 'frame-tested';
                                    });
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.ok(frameTested);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('can be disabled again', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title, results, frameTested;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/cross-origin.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    return [4 /*yield*/, new _1.default({ client: client })
                                            .withRules('frame-tested')
                                            .setLegacyMode()
                                            .setLegacyMode(false)
                                            .analyze()];
                                case 3:
                                    results = _a.sent();
                                    frameTested = results.incomplete.find(function (_a) {
                                        var id = _a.id;
                                        return id === 'frame-tested';
                                    });
                                    chai_1.assert.notEqual(title, 'Error');
                                    chai_1.assert.isUndefined(frameTested);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                });
                describe('callback()', function () {
                    it('returns results when callback is provided', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var title;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, client.getTitle()];
                                case 2:
                                    title = _a.sent();
                                    chai_1.assert.notEqual(title, 'Error');
                                    new _1.default({ client: client }).analyze(function (err, results) {
                                        chai_1.assert.isNull(err);
                                        chai_1.assert.isNotNull(results);
                                        chai_1.assert.isArray(results === null || results === void 0 ? void 0 : results.violations);
                                        chai_1.assert.isArray(results === null || results === void 0 ? void 0 : results.incomplete);
                                        chai_1.assert.isArray(results === null || results === void 0 ? void 0 : results.passes);
                                        chai_1.assert.isArray(results === null || results === void 0 ? void 0 : results.inapplicable);
                                    });
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('returns an error as the first argument', function (done) {
                        Promise.resolve(client.url("".concat(addr, "/index.html")));
                        new _1.default({ client: client, axeSource: 'throw new Error()' }).analyze(function (err, results) {
                            try {
                                chai_1.assert.isNull(results);
                                chai_1.assert.isNotNull(err);
                                done();
                            }
                            catch (e) {
                                done(e);
                            }
                        });
                    });
                });
            });
            describe('axe.finishRun errors', function () {
                var finishRunThrows = ";axe.finishRun = () => { throw new Error(\"No finishRun\")}";
                it('throws an error if window.open throws', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var title, err_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, client.getTitle()];
                            case 2:
                                title = _a.sent();
                                chai_1.assert.notEqual(title, 'Error');
                                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                                // @ts-ignore
                                delete client.createWindow;
                                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                                // @ts-ignore
                                client.createWindow = function () {
                                    return { handle: null };
                                };
                                _a.label = 3;
                            case 3:
                                _a.trys.push([3, 5, , 6]);
                                return [4 /*yield*/, new _1.default({
                                        client: client,
                                        axeSource: axeSource
                                    }).analyze()];
                            case 4:
                                _a.sent();
                                chai_1.assert.fail('Should have thrown');
                                return [3 /*break*/, 6];
                            case 5:
                                err_1 = _a.sent();
                                chai_1.assert.match(err_1.message, /Please make sure that you have popup blockers disabled./);
                                chai_1.assert.include(err_1.message, 'Please check out https://github.com/dequelabs/axe-core-npm/blob/develop/packages/webdriverio/error-handling.md');
                                return [3 /*break*/, 6];
                            case 6: return [2 /*return*/];
                        }
                    });
                }); });
                it('throw an error with modified url', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var title, builder, err_2;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, client.getTitle()];
                            case 2:
                                title = _a.sent();
                                chai_1.assert.notEqual(title, 'Error');
                                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                                // @ts-ignore
                                delete client.createWindow;
                                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                                // @ts-ignore
                                client.createWindow = function () {
                                    return { handle: null };
                                };
                                _a.label = 3;
                            case 3:
                                _a.trys.push([3, 5, , 6]);
                                builder = new _1.default({
                                    client: client,
                                    axeSource: axeSource
                                });
                                builder.errorUrl = 'https://deque.biz';
                                return [4 /*yield*/, builder.analyze()];
                            case 4:
                                _a.sent();
                                chai_1.assert.fail('Should have thrown');
                                return [3 /*break*/, 6];
                            case 5:
                                err_2 = _a.sent();
                                chai_1.assert.match(err_2.message, /Please make sure that you have popup blockers disabled./);
                                chai_1.assert.include(err_2.message, 'Please check out https://deque.biz');
                                return [3 /*break*/, 6];
                            case 6: return [2 /*return*/];
                        }
                    });
                }); });
                it('throws an error if axe.finishRun throws', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var title, err_3;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, client.getTitle()];
                            case 2:
                                title = _a.sent();
                                chai_1.assert.notEqual(title, 'Error');
                                _a.label = 3;
                            case 3:
                                _a.trys.push([3, 5, , 6]);
                                return [4 /*yield*/, new _1.default({
                                        client: client,
                                        axeSource: axeSource + finishRunThrows
                                    }).analyze()];
                            case 4:
                                _a.sent();
                                chai_1.assert.fail('Should have thrown');
                                return [3 /*break*/, 6];
                            case 5:
                                err_3 = _a.sent();
                                chai_1.assert.match(err_3.message, /Please check out/);
                                return [3 /*break*/, 6];
                            case 6: return [2 /*return*/];
                        }
                    });
                }); });
            });
            describe('allowedOrigins', function () {
                var promisify = function (thenable) {
                    return new Promise(function (resolve, reject) {
                        thenable.then(resolve, reject);
                    });
                };
                var getAllowedOrigins = function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, promisify(client.executeAsync("\n              var callback = arguments[arguments.length - 1];\n              var allowedOrigins = axe._audit.allowedOrigins\n              callback(allowedOrigins);\n              "))];
                    });
                }); };
                it('should not set when running runPartial and not legacy mode', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var res, allowedOrigins;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, new _1.default({ client: client }).analyze()];
                            case 2:
                                res = _a.sent();
                                return [4 /*yield*/, getAllowedOrigins()];
                            case 3:
                                allowedOrigins = _a.sent();
                                chai_1.assert.deepEqual(allowedOrigins, [addr]);
                                return [2 /*return*/];
                        }
                    });
                }); });
                it('should not set when running runPartial and legacy mode', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var allowedOrigins;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, new _1.default({ client: client }).setLegacyMode(true).analyze()];
                            case 2:
                                _a.sent();
                                return [4 /*yield*/, getAllowedOrigins()];
                            case 3:
                                allowedOrigins = _a.sent();
                                chai_1.assert.deepEqual(allowedOrigins, [addr]);
                                return [2 /*return*/];
                        }
                    });
                }); });
                it('should not set when running legacy source and legacy mode', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var allowedOrigins;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, new _1.default({ client: client, axeSource: axeLegacySource })
                                        .setLegacyMode(true)
                                        .analyze()];
                            case 2:
                                _a.sent();
                                return [4 /*yield*/, getAllowedOrigins()];
                            case 3:
                                allowedOrigins = _a.sent();
                                chai_1.assert.deepEqual(allowedOrigins, [addr]);
                                return [2 /*return*/];
                        }
                    });
                }); });
                it('should set when running legacy source and not legacy mode', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var res, allowedOrigins;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, client.url("".concat(addr, "/index.html"))];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, new _1.default({
                                        client: client,
                                        axeSource: axeLegacySource
                                    }).analyze()];
                            case 2:
                                res = _a.sent();
                                return [4 /*yield*/, getAllowedOrigins()];
                            case 3:
                                allowedOrigins = _a.sent();
                                chai_1.assert.deepEqual(allowedOrigins, ['*']);
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        });
    };
    for (var _i = 0, _a = ['devtools', 'webdriver']; _i < _a.length; _i++) {
        var protocol = _a[_i];
        _loop_1(protocol);
    }
    describe('WebdriverIO Sync', function () {
        var server;
        var addr;
        var remote;
        var axeTestFixtures = path_1.default.resolve(__dirname, '..', 'fixtures', 'external');
        beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
            var app;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        app = (0, express_1.default)();
                        app.use(express_1.default.static(axeTestFixtures));
                        server = (0, http_1.createServer)(app);
                        return [4 /*yield*/, (0, test_listen_1.default)(server)];
                    case 1:
                        addr = _a.sent();
                        remote = webdriverio.remote({
                            automationProtocol: 'devtools',
                            path: '/',
                            capabilities: {
                                browserName: 'chrome',
                                'goog:chromeOptions': {
                                    args: ['--headless']
                                }
                            },
                            logLevel: 'error'
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        afterEach(function (done) {
            remote
                .then(function (client) {
                return (0, sync_1.default)(function () {
                    client.deleteSession();
                    server.close();
                });
            })
                .then(function () { return done(); })
                .catch(function (e) { return done(e); });
        });
        it('analyze', function (done) {
            remote
                .then(function (client) {
                return (0, sync_1.default)(function () {
                    client.url("".concat(addr, "/index.html"));
                    chai_1.assert.isTrue(client.isDevTools);
                    new _1.default({ client: client }).analyze(function (error, results) {
                        chai_1.assert.isNotNull(results);
                        chai_1.assert.isArray(results === null || results === void 0 ? void 0 : results.violations);
                        chai_1.assert.isArray(results === null || results === void 0 ? void 0 : results.incomplete);
                        chai_1.assert.isArray(results === null || results === void 0 ? void 0 : results.passes);
                        chai_1.assert.isArray(results === null || results === void 0 ? void 0 : results.inapplicable);
                    });
                });
            })
                .then(function () { return done(); })
                .catch(function (e) { return done(e); });
        });
    });
});
//# sourceMappingURL=test.js.map